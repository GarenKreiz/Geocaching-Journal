#!python
# -*- coding: utf-8 -*-
################################################################################
# xml2print.py
#
#     transforms an XML description of a logbook or blog intro HTML
#
#     tags : title, description, date, post, text, image, pano
#
# Copyright GarenKreiz at  geocaching.com or on  YouTube 
# Auteur    GarenKreiz sur geocaching.com ou sur YouTube
#
# Licence:
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import re
import sys
import time
import string

maxRow = 3   # number of pictures in a row (less than 4)
limits = {   # size of pictures changing with number in rows
    1 : { 'H':100, 'V': 50, 'P':200 },
    2 : { 'H': 50, 'V': 25, 'P':200 },
    3 : { 'H': 52, 'V': 38, 'P':200 },
    4 : { 'H': 52, 'V': 38, 'P':200 },
}
printing = False
cleaningComment = False

headerStart = """<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta content="IE=EmulateIE7" http-equiv="X-UA-Compatible">
<meta content="true" name="MSSmartTagsPreventParsing">
<!-- Generated by xml2print.py from Garenkreiz -->

<script language="JavaScript">
<!--
var newwindow;
function popstatic(url,windowName)
{
	// newwindow=window.open(url,windowName,'toolbar=no,status=no,menubas=no');
	newwindow=window.open(url,windowName,'toolbar=no,scrollbars=yes,status=no,menubar=no,location=no');
	newwindow.resizeTo(screen.width-20,screen.height-20)
	newwindow.moveTo(10,10);
	if (window.focus) {newwindow.focus()}
}
//-->
</script>
"""

headerMiddle="""
<link rel="stylesheet" type="text/css" href="logbook.css" media="all">
</head>
<body>
<div class="header">  
<h1>
<a href="https://www.geocaching.com/my/logs.aspx?s=1" target="_blank">%s</a>
</h1>
"""
# old link : http://going-west-2012.blogspot.fr/

headerEnd="""
<p class="description"><i>%s</i></p>
</div> <!-- header -->
<div class="main">
"""

articleBegin="""
"""

dateFormat="""
<div class="date">
<h2 class="date-header">%s</h2>
"""

postBegin="""
<div class="post-entry">
<h3 class="post-title">
"""

postMiddle="""
</h3>
"""

postBanner="""
<div class="post-banner"></div>
"""

postEnd="""
</div>  <!--// class:post-entry //-->
"""

dateEnd="""
</div>  <!--// class:date //-->
"""        

htmlEnd="""
</body>
</html>
"""

pictureFormatTemplate="""
<table class="picture" style="%s"><tbody>
<tr><td>%s<img %s src="%s">%s</td></tr>
<tr><td class="caption">%s</td></tr></tbody></table>
"""

pictureFormat = pictureFormatTemplate%('','%s','','%s','%s','%s')
#pictureFormatHorizontal = pictureFormatTemplate%('','%s','height="%d"' % ( 519/maxRow),'%s','%s','%s')
#pictureFormatVertical   = pictureFormatTemplate%('width: %dpx;'%( 519/maxRow), '%s','height="%d"'   % ( 692/maxRow),'%s','%s','%s')
#pictureFormatPanorama   = pictureFormatTemplate%('', '%s','width="%dpx" '% 735 ,'%s','%s','%s')
pictureFormatHorizontal = pictureFormatTemplate%('','%s','','%s','%s','%s')
pictureFormatVertical   = pictureFormatTemplate%('', '%s','','%s','%s','%s')
pictureFormatPanorama   = pictureFormatTemplate%('', '%s','style="max-width=%dpx;" '% 748 ,'%s','%s','%s')
pictureFormatPanorama   = pictureFormatTemplate%('', '%s','class="panorama"','%s','%s','%s')

rowCount = 0   # current number of images in row
pictures = []
fOut = None

# cleaning text from HTML formatting
def cleanText(buffer,all=True):
    resu = re.sub('</*(tbody|table|div|text)[ /]*>',' ',buffer)
    resu = re.sub('</*div>'                      ,'',resu)
    resu = re.sub('<div[^>]*>'                   ,'',resu)
    resu = re.sub('[\n\r]*'                      ,'',resu)
    resu = re.sub('  *'                          ,' ',resu)
    if all:
        resu = re.sub('<[^>]*>','',resu)
    return resu

# end of a row of images
def flushImgRow():
    global printing, cleaningComment

    global maxRow, rowCount, pictures, fOut, maxWidth

    if len(pictures) == 0:
        return
    
    fOut.write('<table class="table-pictures"><tr>')
    for (d,image,comment,width,height) in pictures:
        fOut.write('<td>')
        nbCommentRows = maxWidth[d] / limits[maxRow][d]
        if not cleaningComment:
            if printing:
                comment = re.sub('&pad;','<br>&nbsp;',comment)
            else:
                comment = re.sub('&pad;','',comment)
        if cleaningComment and maxWidth[d] > limits[maxRow][d]:
            i = len(comment)
            while i < nbCommentRows * limits[maxRow][d]:
                comment += '<br>&nbsp;'
                i += limits[maxRow][d]

        # specific to geocaching logs : open a full sized view of picture
        imageFullSize = re.sub('https://img.geocaching.com/cache/log/display/','https://img.geocaching.com/cache/log/',image)
        popupLink = '<a href="javascript:popstatic(\'%s\',\'.\');">'%imageFullSize
        if comment == '__EMPTY__':
            fOut.write('<table></table>')
        elif d == 'V':
            fOut.write(pictureFormatVertical   % (popupLink, image, '</a>', comment))
        elif d == 'H':
            fOut.write(pictureFormatHorizontal % (popupLink, image, '</a>', comment))
        elif d == 'P':
            fOut.write(pictureFormatPanorama   % (popupLink, image, '</a>', comment))
        comment = re.sub('<br>','',comment)
        fOut.write('</td>')
    fOut.write('</tr></table>')
        
    maxWidth= { 'H':0, 'V':0, 'P':0 }
    rowCount = 0
    pictures = []

# end of the table of images
def flushImgTable():
    global rowCount, pictures

    flushImgRow()
    #fOut.write('</table>\n')

def flushPost():
    global fOut
    fOut.write(postEnd)

def flushDate():
    global fOut
    fOut.write(dateEnd)
    
def flushText(text):
    global fOut
    if text:
        if text.find('<p>') <> 0:
            text = '<p>'+text+'</p>'
        fOut.write(text)

################################################################################
# processFile
#    
	
def processFile(fichier):

    global limits, maxRow, fOut, pictures, maxWidth
    
    result = ''

    firstDate = True
    processingImages = False
    processingText = False
    processingPost = False
    
    rowCount = 0
    
    print "Processing",fichier
    f = open(fichier,'r')
    text = None
    
    fOut.write(headerStart)
    
    l = f.readline().strip()
    while l <> '':
        # analyse of the XML tag
        type = re.sub('>.*','>',l)

        if type == '<image>' or type == '<pano>':
            flushText(text)
            text = None
            # parsing image item
            # <image>foo.jpg<height>480</height><width>640</width><comment>Nice picture</comment></image>            
            # <pano>foo.jpg<height>480</height><width>1000</width><comment>Nice panorama</comment></image>            
            # displaying images in tables
            line = re.sub('<[^>]*>','|',l)
            try:
                imgDesc = line.split('|')
            except Exception, msg:
                print '!!!!!!!!!!!!! Bad image format:', msg, line
            if len(imgDesc) == 4:
                (_,image,comment,_) = imgDesc
            elif len(imgDesc) == 9:
                (_,image,height,_,width,_,comment,_,_) = imgDesc
            else:
                print '!!!!!!!!!!!!! Bad image format:', line
            if not processingImages or type == '<pano>':
                flushImgTable()
                maxWidth= { 'H':0, 'V':0, 'P':0 }
                pictures = []
                nbCommentRows = 0
                end = False
                rowCount = 0
                #fOut.write('<table class="table-pictures">')
            processingImages = True
            if type == '<pano>':
                pictures.append(('P',image,comment,width,height))
            elif height == '640':
                maxWidth['V'] = max(maxWidth['V'], len(comment))
                pictures.append(('V',image,comment,width,height))
            elif width == '640':
                maxWidth['H'] = max(maxWidth['H'], len(comment))
                pictures.append(('H',image,comment,width,height))
            elif width == '800':
                maxWidth['P'] = max(maxWidth['P'], len(comment))
                pictures.append(('P',image,comment,width,height))
            else:
                pictures.append(('H',image,comment,width,height))                
            rowCount += 1        
        else:
            # end of the table of images
            if processingImages:
                flushImgTable()
            processingImages = False

        if type == '<title>':
            # title of the logbook
            l = re.sub('</*title>','',l)
            fOut.write('<title>%s</title>\n' % cleanText(l,False))
            fOut.write(headerMiddle % l)
            
        elif type == '<description>':
            # description of the logbook
            fOut.write(headerEnd % cleanText(l))
            
        elif type == '<date>':
            # new date in the logbook
            flushText(text)
            text = None

            if firstDate == False:
                flushPost()
                flushDate()
            firstDate = False
            processingPost = False
            
            date = cleanText(l)
            date = string.upper(date[0])+date[1:]
            result = result +  '<date>' + date + '</date>\n'
            fOut.write(dateFormat % date)
            (image, text, width, height) = ('','',0,0)

        elif type == '<post>':
            # new post title : left text | url | right text | url
            flushText(text)
            text = None
            if processingImages:
                flushImgTable()
            processingImages = False
            if processingPost:
                flushPost()
                fOut.write(postBanner)      # banner between 2 posts
            processingPost = True
            post = cleanText(l)
            print 'Post:',re.sub('\|.*','',post)

            # <post>left title|left url|right title|right url</post> 
            elements = post.split('|')
            if len(elements) > 1:
                post = '<a href="' + elements[1] + '" target="_blank">' + elements[0].strip() + '</a>'
                if len(elements) > 2:
                    post = '<div class="alignleft">' + post + '</div>'
                    log = elements[2].strip()
                    if len(elements) > 3:
                        log = '<a href="' + elements[3] + '" target="_blank">' + log + '</a>'
                    post = post + '<div class="alignright">' + log + '</div>'

            fOut.write(postBegin)
            fOut.write(post)
            fOut.write(postMiddle)
            
            searchingImage = True
            processingImage = False
            maxWidth= { 'H':0, 'V':0, 'P':0 }
            pictures = []
            nbCommentRows = 0
            end = False
            rowCount = 0
            
        elif type == '<text>':
            # list of paragraphs
            fOut.write('<div style="clear: both;"></div>')
            text = cleanText(l,False)
            
        elif type == '</text>':
            flushText(text)
            text = None

        elif type == '<split/>':
            # splitting image table
            print 'Splitting table'
            if processingImages:
                flushImgTable()
                processingImages = False
                
        elif type == '<page/>':
            # start a new page : to be used to optimize the printing version
            if processingImages:
                flushImgTable()
            processingImages = False
            fOut.write('<div class="page-break"  style="page-break-before:always;"></div>\n')
            
        elif type in ['<image>','</image>','<pano>','</pano>']:
            # already processed 
            pass
        else:
            text = text + cleanText(l,False)

        if rowCount == maxRow:
            flushImgRow()
            rowCount = 0
    
        l = f.readline().strip()

    if processingImages:
        # the logbook ends with images
        flushImgTable()
    
    flushPost()
    fOut.write(htmlEnd)
    
    
def xml2print(xmlInput, htmlOutput, printing=False):
    global fOut
    
    fOut = open(htmlOutput,'w')
    result = processFile(xmlInput)
    fOut.close()
    print "Result file:",htmlOutput
    print "That's all, folks!"
    

if __name__ == "__main__":
    def usage():
        print 'Usage: python xml2print.py logbook.xml logbook.html [-p|--printing]'
        sys.exit()
    
    import getopt
    try:
        opts, args = getopt.getopt(sys.argv[1:],"p", ['printing'])
    except getopt.GetoptError:
        usage()

    printing = False
    for opt, arg in opts:
      if opt == '-h':
          usage()
      elif opt == "-p":
          printing = True

    if len(args) == 2:
        xml2print(args[0],args[1],printing)
    else:
        usage()

    
